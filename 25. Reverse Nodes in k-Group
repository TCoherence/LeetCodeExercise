/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if ( head == null ) return null;
        ListNode dummyHead = new ListNode(0);
        dummyHead.next = head;
        reverseHelper(dummyHead, k);
        return dummyHead.next;
    }
    
    public void reverseHelper(ListNode head, int k) {
        ListNode tail = head;
        // get the tailNode
        for ( int i = 0; i < k; i++ ) {
            tail = tail.next;
            if ( tail == null ) return ;
        }

        tail = tail.next; // curLast node, need to move one more step.
        
        // System.out.printf("head = %d\t", head.val);
        // System.out.printf("tail = %d\n", tail.val);
          
        ListNode cur = head.next;
        // last node don't need to move, start from i = 1
        for ( int i = 0; i < k; i++ ) {
            ListNode tmp = cur.next;
            cur.next = tail;
            tail = cur;
            cur = tmp;
        }
        head.next = tail;
        ListNode nextHead = head;
        for ( int i = 0; i < k; i++ ) {
            nextHead = nextHead.next;
        }
        reverseHelper(nextHead, k);
    }
}
