/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements Iterator<Integer> {
    private Stack<Integer>  stack;
    private int             idx;
    
    
    public NestedIterator(List<NestedInteger> nestedList) {
        stack = new Stack<>();
        flattenToStack(stack, nestedList, -1);
    }

    @Override
    public Integer next() {
        return stack.pop();
    }

    @Override
    public boolean hasNext() {
        return stack.size() > 0;
    }
    
    public void flattenToStack(Stack<Integer> stack, List<NestedInteger> nestedList, int idx) {
        int sz = nestedList.size();
        for ( int i = sz - 1; i >= 0; i-- ) {
            if ( nestedList.get(i).isInteger() ){
                Integer tmp = nestedList.get(i).getInteger();
                stack.push(tmp);
            }
            else {
                flattenToStack(stack, nestedList.get(i).getList(), i);
            }
        }
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */
